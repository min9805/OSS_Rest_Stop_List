<%- include('./header.ejs') %>


            <!-- Header-->
            <header class="py-5">
                <div class="container px-5">
                    <div class="row justify-content-center">
                        <div class="col-lg-8 col-xxl-6">
                            <div class="text-center my-5">
                                <h1 class="fw-bolder mb-3">휴게소 날씨</h1>
                                <p class="lead fw-normal text-muted mb-4">Just search the name of the rest stop,<br>You'll find out the weather of the rest area.</p>
                                <div class="dropdown">
                                
                                    <button class ="btn btn-primary dropdown-toggle " id="highway" data-bs-toggle="dropdown">
                                        고속도로 선택
                                    </button>
                                    <div class ="dropdown-menu">
                                        <a class="dropdown-item" onclick="addReststop('0010')">경부선</a>
                                        <a class="dropdown-item" onclick="addReststop('0550')">중앙선</a>
                                        <a class="dropdown-item" onclick="addReststop('0500')">영동선</a>
                                    </div>
                                    <button class ="btn btn-primary dropdown-toggle " id = "rest_stop" data-bs-toggle="dropdown">
                                        휴게소 선택
                                    </button>
                                    <div class ="dropdown-menu" id = "select_restStop">
                                    </div>
                                </div>
                            </div>
                            
                            
                            
                        </div>
                    </div>
                </div>
            </header>

            
            <!--bar-->  
            <section class="py-3 bg-light" id="scroll-target">
                <div class="container px-1 my-1">
                    <div class="text-center">
                        <center><p><h3 class="fw-bolder"><reststop_name></reststop_name></h3></p></center>
                        <center><hr style ="height:2px; width: 55%"></hr></center>
                        <center><p><h5 class="fw-bolder"><bar1></bar1>&emsp; &emsp; &nbsp; <bar2></bar2> &emsp; &emsp; &nbsp; <bar3></bar3> &emsp; &emsp;  &nbsp; <bar4></bar4></h5></p></center>
                        <div class="container px-1 my-1"><h6 class="lead fw-normal text-muted mb-4"><bar_Weather></bar_Weather><bar_temperature></bar_temperature><bar_humidity></bar_humidity><bar_wind></bar_wind><empty></empty></h6><div>
                    </div>
                    </div>
            </section>  



            <!-- [ 그래프 박스 ]-->
            <!--temperature graph-->
            <section class="py-5" id="scroll-target">
                <div class="container px-5 my-5">
                    <div class="row gx-5 align-items-center">
                        <div class="col-lg-6"><canvas id="temperature-graph" width="100" height="50"></canvas></div>
                        <div class="col-lg-6">
                            <h2 class="fw-bolder"><exp1></exp1></h2>
                            <p class="lead fw-normal text-muted mb-0"><exp2></exp2></p>
                        </div>
                    </div>
                </div>
            </section>


            <!--humidity graph-->
            <section class="py-5" id="scroll-target">
                <div class="container px-5 my-5">
                    <div class="row gx-5 align-items-center">
                        <div class="col-lg-6"><canvas id="humidity-graph" width="100" height="50"></canvas></div>
                        <div class="col-lg-6">
                            <h2 class="fw-bolder"><exp3></exp3></h2>
                            <p class="lead fw-normal text-muted mb-0"><exp4></exp4></p>
                        </div>
                    </div>
                </div>
            </section>
            


            <!--wind graph-->
            <section class="py-5" id="scroll-target">
                <div class="container px-5 my-5">
                    <div class="row gx-5 align-items-center">
                        <div class="col-lg-6"><canvas id="wind-graph" width="100" height="50"></canvas></div>
                        <div class="col-lg-6">
                            <h2 class="fw-bolder"><exp5></exp5></h2>
                            <p class="lead fw-normal text-muted mb-0"><exp6></exp6></p>
                        </div>
                    </div>
                </div>
            </section>   
            
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
            <script>  
            
                //날씨 오픈 api는 조회 방식이나 끌어오는 데이터가 복잡해서 주석을 자세히 작성함

                //* 휴게소 날씨 오픈 api 주의 사항 ()
                //날씨 정보가 반영되는 데에 시간이 걸려서 대체적으로 (현재 시간-3시간)부터 조회 가능함
                //날씨 정보가 올라오지 않는, 데이터가 빈 시간대도 존재함.
                //오픈 api 데이터를 가져오기 위해서는 필수적으로 key, type(xml/json), sdate(날짜), stdHour(시간)을 입력해야 함
                
                //[ 현재 year, month, date, time(hour) 받아오기 ]
                //데이터 조회시 year이나 time은 7대신 07형태로 입력해야 하므로 slice를 이용하여 0X형태로 만듦
                let present = new Date();   
                let present_year = present.getFullYear(); 
                let present_month = ('0'+(present.getMonth() + 1)).slice(-2);  
                let present_date = ('0'+(present.getDate())).slice(-2); 
                let present_time = ('0'+(present.getHours())).slice(-2); 

                //현재 년도, 월, 날짜를 YYYYMMDD형태로 변형 
                //날씨 오픈 api의 연일월 입력타입이 YYYYMMDD
                let YYYYMMDD = String(present_year)+String(present_month)+String(present_date);  

                //어제 날짜 구하기
                //어제 날짜를 구하는 이유는 바를 출력할 때는 최소 2-3시간, 그래프를 출력할 때에는 9시간 전 ~ 3시간 전의 데이터를
                //수집해야 하는데, 이때 이 구간이 00시에 겹치는 경우에는 그 이전에 해당하는 시간은 yesterday_YYYYMMDD로, 
                //그 이후에 해당하는 시간은 YYYYMMDD로 하여 데이터를 정확하게 가져오기 위함이다.  
                let yesterday = new Date(present_year, present.getMonth(), present_date-1).toLocaleDateString();
                ydata = yesterday.split('.');
                yesterday_YYYYMMDD = String(ydata[0])+ ('0'+String(ydata[1].substr(1))).slice(-2) + ('0'+String(ydata[2].substr(1))).slice(-2)
                
                console.log(yesterday_YYYYMMDD)
                console.log(YYYYMMDD)


                
                // 모든 자식요소들을 삭제하는 함수
                function removeAllchild(div) {
                    while (div.hasChildNodes()) {
                        div.removeChild(div.firstChild);
                    }
                }

                var serviceAreaCode= "";


                // 각 고속도로에 존재하는 휴게소 리스트를 작성하여 드랍다운 메뉴에 추가합니다.
                function addReststop(lineNumber){

                    // 아래 조건문은 각 고속도로 선택시 해당 고속도로 이름이 버튼(html)에 기록되도록 하기 위함입니다.
                    let highway_Area = document.getElementById('highway');
                    if(lineNumber==='0010'){
                        highway_Area.innerHTML = '경부선';
                    }
                    else if(lineNumber==='0550'){
                        highway_Area.innerHTML = '중앙선';
                    }
                    else if(lineNumber==='0500'){
                        highway_Area.innerHTML = '영동선';
                    }
                    let tagArea = document.getElementById('select_restStop'); // 드랍다운 메뉴 추가할 태그 아이디 저장
                    removeAllchild(tagArea);    // 고속도로 선택시마다 새로운 휴게소를 불러와야 하므로 현재 드랍다운 메뉴에 존재하는 자식요소 싹다 삭제합니다.
                    
                    


                    // 아래의 ajax 문을 통해서 휴게소표준 api를 불러옵니다. 각 고속도로에 대한 모든 휴게소이름과 휴게소 코드를 가져오기 위함입니다.
                    // 여기서 가져오게되는 휴게소 코드(serviceAreaCode)는 추후에 휴게소별 날씨정보 api에 있는 unitCode와 상응하는 데이터입니다.
                    var routeCodes = [];
                    var svarAddrs = [];
                    var rest_names = [];
                    var serviceAreaCodes = [];
                    // 페이지 1
                    $.ajax({
                        url: "http://data.ex.co.kr/openapi/business/conveniServiceArea?key=1817997939&type=json&numOfRows=99&pageNo=1",
                        async:false,
                        success: function(data){
                            //변수 설정
                            userData = data;
                        },
                    }).done(function() {
                        var routeCode = ""; 
                        var svarAddr = "";
                        var rest_name = "";
                        var data_count = userData["list"].length    // 데이터 개수 얻기
                        
                        for (var i =0; i<data_count; i++){
                            routeCode = JSON.stringify(userData["list"][i]["routeCode"]);   // 고속도로 번호를 가져옵니다.
                            rest_name = JSON.stringify(userData["list"][i]["serviceAreaName"]); // 휴게소 이름을 가져옵니다.
                            serviceCode = JSON.stringify(userData["list"][i]["serviceAreaCode"]); // 휴게소코드를 가져옵니다.
                            
                            if(routeCode.substring(1,5) === lineNumber){    //  고속도로 코드가 같다면
                                rest_names.push(rest_name); //휴게소 이름을 저장해둡니다...
                                serviceAreaCodes.push(serviceCode); //  휴게소 코드를 저장해둡니다.
                            }
                        }
                        // 아래 forEach문은 저장한 모든 휴게소에 대해, 드랍다운 버튼을 생성하기 위함입니다.
                        rest_names.forEach(function(addr,index){
                            let new_A_Button = document.createElement('a');   // a 속성 생성
                            new_A_Button.setAttribute('class','dropdown-item');
                            new_A_Button.setAttribute('onclick',"Showweather("+serviceAreaCodes[index]+","+rest_names[index]+")");
                            new_A_Button.innerHTML = rest_names[index].substring(1,rest_names[index].length-1);
                            tagArea.appendChild(new_A_Button);
                        })
                    })

                    // 페이지 2, 페이지 1과 모든 과정이 동일하며, 오픈 api 데이터 가져오는 특성상 페이지를 나누었습니다.
                    $.ajax({
                        url: "http://data.ex.co.kr/openapi/business/conveniServiceArea?key=1817997939&type=json&numOfRows=99&pageNo=2",
                        async:false,
                        success: function(data){
                            //변수 설정
                            userData = data;
                        },
                    }).done(function() {
                        var routeCode = ""; 
                        var svarAddr = "";
                        var rest_name = "";
                        var data_count = userData["list"].length    // 데이터 개수 얻기
                        
                        for (var i =0; i<data_count; i++){
                            routeCode = JSON.stringify(userData["list"][i]["routeCode"]);
                            rest_name = JSON.stringify(userData["list"][i]["serviceAreaName"]); // 휴게소 이름...
                            serviceCode = JSON.stringify(userData["list"][i]["serviceAreaCode"]);
                            
                            if(routeCode.substring(1,5) === lineNumber){    //  고속도로 코드가 같다면
                                rest_names.push(rest_name); //휴게소 이름...
                                serviceAreaCodes.push(serviceCode);
                            }
                        }
                        rest_names.forEach(function(addr,index){
                            let new_A_Button = document.createElement('a');   // a 속성 생성
                            new_A_Button.setAttribute('class','dropdown-item');
                            new_A_Button.setAttribute('onclick',"Showweather("+serviceAreaCodes[index]+","+rest_names[index]+")");
                            new_A_Button.innerHTML = rest_names[index].substring(1,rest_names[index].length-1);
                            tagArea.appendChild(new_A_Button);
                        })
                    })
                    // 페이지 3
                    $.ajax({
                        url: "http://data.ex.co.kr/openapi/business/conveniServiceArea?key=1817997939&type=json&numOfRows=99&pageNo=3",
                        async:false,
                        success: function(data){
                            //변수 설정
                            userData = data;
                        },
                    }).done(function() {
                        var routeCode = ""; 
                        var svarAddr = "";
                        var rest_name = "";
                        var data_count = userData["list"].length    // 데이터 개수 얻기
                        
                        for (var i =0; i<data_count; i++){
                            routeCode = JSON.stringify(userData["list"][i]["routeCode"]);
                            rest_name = JSON.stringify(userData["list"][i]["serviceAreaName"]); // 휴게소 이름...
                            serviceCode = JSON.stringify(userData["list"][i]["serviceAreaCode"]);
                            
                            if(routeCode.substring(1,5) === lineNumber){    //  고속도로 코드가 같다면
                                rest_names.push(rest_name); //휴게소 이름...
                                serviceAreaCodes.push(serviceCode);
                            }
                        }
                        rest_names.forEach(function(addr,index){
                            let new_A_Button = document.createElement('a');   // a 속성 생성
                            new_A_Button.setAttribute('class','dropdown-item');
                            new_A_Button.setAttribute('onclick',"Showweather("+serviceAreaCodes[index]+","+rest_names[index]+")");
                            new_A_Button.innerHTML = rest_names[index].substring(1,rest_names[index].length-1);
                            tagArea.appendChild(new_A_Button);
                        })
                    })

                }

                //검색창에 휴게소 이름을 입력하면 실행되는 함수 Showweather() serviceCode = 휴게소 코드, rest_name = 휴게소 이름
                function Showweather(serviceCode,rest_name) {
                
                serviceCode = serviceCode.substring(3,serviceCode.length);  //가져온 휴게소코드를 여기서 사용하는 휴게소코드인 unitCode와 동일한포맷으로 바꿉니다.
                let rest_stop = document.getElementById('rest_stop');   // 해당 줄과 바로 아랫줄은 드랍다운 버튼선택시 해당 휴게소이름을 html에 적용하기 위함입니다.
                rest_stop.innerHTML =rest_name;
                //휴게소 이름을 검색하기 전까지는 기타 html 구성 요소들은 숨기기 위하여 innerHTML사용
                //휴게소 이름 검색시 화면에 표시
                //bar
                document.querySelector('bar1').innerHTML = '날씨';
                document.querySelector('bar2').innerHTML = '온도';
                document.querySelector('bar3').innerHTML = '습도';
                document.querySelector('bar4').innerHTML = '바람';
                
                //그래프
                document.querySelector('exp1').innerHTML = 'Temperature 기온';
                document.querySelector('exp2').innerHTML = '지금으로부터 9시간 전부터 3시간 전까지의 기온을 조회합니다. <br>* 날씨 데이터가 없는 시간대는 조회 불가능합니다';
                document.querySelector('exp3').innerHTML = 'Humidity 습도';
                document.querySelector('exp4').innerHTML = '지금으로부터 9시간 전부터 3시간 전까지의 습도를 조회합니다. ';
                document.querySelector('exp5').innerHTML = 'wind velocity 풍속';
                document.querySelector('exp6').innerHTML = '지금으로부터 9시간 전부터 3시간 전까지의 풍속을 조회합니다. ';

                //사용자가 입력한 휴게소 이름의 값을 name 변수에 할당    
                name = rest_name
                //bar부분에 휴게소 이름 출력
                document.querySelector('reststop_name').innerHTML = rest_name;

                

                // < 맨 위 바에 조회 가능한 데이터 중 가장 최근의 날씨 정보 띄우기>

                //오픈 api에서 받아올 수 있는 데이터가 상당히 띄엄띄엄한 관계로 종종 정보가 없는 시간대도 존재하므로 만약의 경우를 대비하여
                //현재 시간으로부터 5시간 전 ~ 2시간 전의 정보중 가장 최근의 정보를 얻을 수 있도록 작성함.

                var nnamedata = new Array(10);
                var ttempdata = new Array(10);
                var hhumidata = new Array(10);
                var wwinddata = new Array(10);
                
                for(let k=5; k>1; k--){
                   //present_time-k가 음수인 경우 방지
                    if(present_time-k <0){
                        time1 = present_time-k+24;
                        date1 = yesterday_YYYYMMDD
                    }
                    else{
                        time1 = present_time-k
                        date1 = YYYYMMDD
                    }

                //fetch
                // 아래 fetch 상황 0602일 11:19 분 기준, 데이터 가져올 수 없음..
                fetch('http://data.ex.co.kr/openapi/restinfo/restWeatherList?key=6806352377&type=json&sdate='+ date1 +'&stdHour=' + ('0'+ String(time1)).slice(-2)).then(function(response){
                //testing
                //fetch('http://data.ex.co.kr/openapi/restinfo/restWeatherList?key=test&type=json&sdate='+ "20220316" +'&stdHour='+ ('0'+ String(16)).slice(-2)).then(function(response){
                    method: 'GET';
                    body: JSON.stringify(this.obj)
                    response.text().then(function(text){
                        console.log(text)
                    //불필요한 데이터들을 정리하고 split을 이용하여 text data를 array data로 변환
                    //{}로 구성된 한 세트의 데이터가 어레이의 원소 하나가 되도록 split을 사용
                    index1=text.indexOf('[')
                    index2=text.indexOf(']')
                    ndata=text.substr(index1+1, index2-index1+1)
                    nndata=ndata.split('},');
                    
               
                        //ReststopName (휴게소 이름) 데이터 추출  
                        for(let i=0; i<nndata.length; i++){
                            // 아래 두줄의 코드를 통해서 휴게소코드를 가져옵니다.
                            let index1forUnitCode = nndata[i].indexOf('"unitCode":"');
                            unitCode = nndata[i].substr(index1forUnitCode+12,3);

                            index3=nndata[i].indexOf('"unitName":"')
                            index4=nndata[i].indexOf('"unitCode":"')
                            ReststopName=nndata[i].substr(index3+12, index4-index3-14)
                          
                            //데이터에서 추출한 휴게소 이름 ReststopName이 검색창을 통해서 사용자에게 입력받은 이름 name과 일치하는 경우
                            //그 데이터 셋에서 weather, temperature, humidity, wind를 추출하도록 함.
                            
                            // 해당 함수의 매개변수로 가져온 휴게소 코드와, 함수 안에서 fetch를 통해 가져온 오픈 api의 휴게소코드가 동일한지 비교합니다.
                            //fawfe
                            if(serviceCode == unitCode){
                                console.log("unitCode access");
                                
                                //Weather  
                                index5=nndata[i].indexOf('"weatherContents":"')
                                index6=nndata[i].indexOf('"statusNo":"')
                                bar_weather=nndata[i].substr(index5+19, index6-index5-21)
                            
                                //temperature
                                index7=nndata[i].indexOf('"tempValue":"')
                                index8=nndata[i].indexOf('"dewValue":"')
                                bar_temperature=nndata[i].substr(index7+13, index8-index7-20)
            
                                //humidity
                                index9=nndata[i].indexOf('"humidityValue":"')
                                index10=nndata[i].indexOf('"windContents":"')
                                bar_humidity=nndata[i].substr(index9+17, index10-index9-26)
                  
                                //wind
                                index11=nndata[i].indexOf('"windValue":"')
                                bar_wind=nndata[i].substr(index11+13,3)

                                //어레이 nnamedata, ttempdata, hhumidata, wwinddata에 각각 bar_weather, bar_temperature, bar_humidity, bar_wind 데이터 할당
                                nnamedata[k]=bar_weather;
                                ttempdata[k]=bar_temperature;
                                hhumidata[k]=bar_humidity;
                                wwinddata[k]=bar_wind;
                          } 
                        }  
                        
                            //innerhtml을 이용해서 html화면에 데이터 표기
                            //5시간 전, 4시간 전, 3시간 전, 2시간 전의 데이터 중 가장 최근의 데이터를 출력하도록 함
                            for(let o=5; o>1; o-- ){
                                if(nnamedata[2] !='undefined'){
                                    document.querySelector('bar_Weather').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(nnamedata[2])).slice(-12);
                                    document.querySelector('bar_temperature').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(ttempdata[2])).slice(-14)+'°C';
                                    document.querySelector('bar_humidity').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(hhumidata[2])).slice(-12)+'%'
                                    document.querySelector('bar_wind').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(wwinddata[2])).slice(-12)+ 'm/s';
                                    document.querySelector('empty').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0");                                    
                                }

                                else{
                                    if(nnamedata[3]!='undefined'){
                                        document.querySelector('bar_Weather').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(nnamedata[3])).slice(-12);
                                        document.querySelector('bar_temperature').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(ttempdata[3])).slice(-14)+'°C';
                                        document.querySelector('bar_humidity').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(hhumidata[3])).slice(-12)+'%'
                                        document.querySelector('bar_wind').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(wwinddata[3])).slice(-12)+ 'm/s';
                                        document.querySelector('empty').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0");       
                                    }
                                    else{
                                        if(nnamedata[4]!='undefined'){
                                            document.querySelector('bar_Weather').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(nnamedata[4])).slice(-12);
                                            document.querySelector('bar_temperature').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(ttempdata[4])).slice(-14)+'°C';
                                            document.querySelector('bar_humidity').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(hhumidata[4])).slice(-12)+'%'
                                            document.querySelector('bar_wind').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(wwinddata[4])).slice(-12)+ 'm/s';
                                            document.querySelector('empty').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0")
                                        }
                                        else{
                                            if(nnamedata[5]!='undefined'){
                                            document.querySelector('bar_Weather').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(nnamedata[5])).slice(-12);
                                            document.querySelector('bar_temperature').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(ttempdata[5])).slice(-14)+'°C';
                                            document.querySelector('bar_humidity').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(hhumidata[5])).slice(-12)+'%'
                                            document.querySelector('bar_wind').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0"+String(wwinddata[5])).slice(-12)+ 'm/s';
                                            document.querySelector('empty').innerHTML = ("\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0")
                                        }

                                        }
                                    }
                                }

                            }
                    })                           
                  })  
                }
                

                //그래프 그리기
                //온도, 습도, 풍속 데이터를 array에 저장하여 그래프에 넘겨줌
                var tempdata = new Array(10);
                var humidata = new Array(10);
                var winddata = new Array(10);

                name = rest_name

                for(let j=0; j<7; j++){
                    //present_time-3-j가 음수인 경우 방지
                    if(present_time-3-j <0){
                        time2 = present_time-3-j+24;
                        date2 = yesterday_YYYYMMDD
                        
                    }
                    else{
                        time2 = present_time-3-j
                        date2 = YYYYMMDD
                    }

                name = rest_name
                fetch('http://data.ex.co.kr/openapi/restinfo/restWeatherList?key=6806352377&type=json&sdate='+ date2 +'&stdHour=' + ('0'+String(time2)).slice(-2)).then(function(response){
                //testing
               // fetch('http://data.ex.co.kr/openapi/restinfo/restWeatherList?key=test&type=json&sdate='+ "20220524" +'&stdHour='+ ('0'+ String(22-j)).slice(-2)).then(function(response){
                    method: 'GET';
                    body: JSON.stringify(this.obj)
                    response.text().then(function(text){
  
                    //위와 같은 방식으로 데이터 정리
                    index1=text.indexOf('[')
                    index2=text.indexOf(']')
                    ndata=text.substr(index1+1, index2-index1+1)
                    nndata=ndata.split('},');
               
                         //ReststopName (휴게소 이름)  
                         for(let i=0; i<nndata.length; i++){
                        let index1forUnitCode = nndata[i].indexOf('"unitCode":"');
                        unitCode = nndata[i].substr(index1forUnitCode+12,3);

                         index3=nndata[i].indexOf('"unitName":"')
                         index4=nndata[i].indexOf('"unitCode":"')
                         ReststopName=nndata[i].substr(index3+12, index4-index3-14)

                         
                          if(serviceCode == unitCode){
                          //Weather  
                          index5=nndata[i].indexOf('"weatherContents":"')
                          index6=nndata[i].indexOf('"statusNo":"')
                          Weather=nndata[i].substr(index5+19, index6-index5-21)
            
                          //temperature
                          index7=nndata[i].indexOf('"tempValue":"')
                          index8=nndata[i].indexOf('"dewValue":"')
                          Temperature=nndata[i].substr(index7+13, index8-index7-20)
            
                          //humidity
                          index9=nndata[i].indexOf('"humidityValue":"')
                          index10=nndata[i].indexOf('"windContents":"')
                          Humidity=nndata[i].substr(index9+17, index10-index9-26)
            
                  
                          //wind
                          index11=nndata[i].indexOf('"windValue":"')
                          Wind=nndata[i].substr(index11+13,3)

                          //어레이 tempdata, humidata, winddata에 각각 Temperature, Humidity, Wind 데이터 할당
                          tempdata[j]=Temperature;
                          humidata[j]=Humidity;
                          winddata[j]=Wind;}  
                          }                                               


                        //temperature-graph
                        new Chart(document.getElementById("temperature-graph"), {
                            type: 'line',
                            data: {
                                labels: [ '9시간 전','8시간 전','7시간 전','6시간 전','5시간 전','4시간 전','3시간 전'],
                    
                                datasets: [
                                    {label: "temperature 기온 (단위: °C)",
                                    borderColor : "#7DEEBC",                      
                                    data: [tempdata[6], tempdata[5] ,tempdata[4] ,tempdata[3] ,tempdata[2] ,tempdata[1] ,tempdata[0] ],
                                    backgroundColor: "#D2FFD2"}
                                ]
                            },

                            options: {
                                scales: {
				                    yAxes: [{
					                    ticks: {
						                    min: -30,
						                    max: 40,
					                    }
				                    }]
			                    }
	           	            }
                        });
            
                        //humidity-graph 
                        new Chart(document.getElementById("humidity-graph"), {
                            type: 'line',
                            data: {
                                labels: [ '9시간 전','8시간 전','7시간 전','6시간 전','5시간 전','4시간 전','3시간 전'],
                    
                                datasets: [
                                    {label: "Humidity 습도 (단위: %)",
                                    borderColor : "#28B4B4",                      
                                    data: [humidata[6],humidata[5],humidata[4],humidata[3],humidata[2],humidata[1],humidata[0]],
                                    backgroundColor: "#98EBDC"}
                                ]
                            },

                            options: {
                                scales: {
				                    yAxes: [{
					                    ticks: {
						                    min: 0,
						                    max: 100,
					                    }
				                    }]
			                    }
	           	            }
                        });

                        //wind-graph
                        new Chart(document.getElementById("wind-graph"), {
                            type: 'line',
                            data: {
                                labels:  [ '9시간 전','8시간 전','7시간 전','6시간 전','5시간 전','4시간 전','3시간 전'],
                    
                                datasets: [
                                    {label: "wind velocity 풍속 (단위: m/s)",
                                    borderColor : "#82B3ED",                      
                                    data: [winddata[6],winddata[5],winddata[4],winddata[3],winddata[2],winddata[1],winddata[0]],
                                    backgroundColor: "#E0EBFF"}
                                ]
                            },

                            options: {
                                scales: {
				                yAxes: [{
					                    ticks: {
						                    min: 0,
						                    max: 20,
					                    }
				                    }]
			                    }
	           	            }
                         });        })

                            })
                            }
                        }
            </script>


            <!--그래프를 그리기 위해서 chart.js를 불러옴-->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>

                 
        </main>
        <!-- Footer-->
        <%- include('./footer.ejs') %>
